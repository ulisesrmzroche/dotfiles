# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
#
#

# React Debug Helpers
'.source.jsx':
  'Log Props':
    'prefix': 'logProps'
    'body': "console.log('props: ', this.props)"
'.source.jsx':
  'Log Next Props':
    'prefix': 'logNextProps'
    'body': "console.log('nextProps: ', nextProps)"
'.source.jsx':
  'Log State ':
    'prefix': 'logState'
    'body': "console.log('state: ', this.state)"
'.source.jsx':
  'Log Next State ':
    'prefix': 'logNextState'
    'body': "console.log('nextState: ', nextState)"

# React snippets
'.source.js':
  'componentDidMount':
    'prefix': 'componentDidMount'
    'body': """
      componentDidMount() {

      }
    """
'.source.js':
  'componentWillReceiveProps':
    'prefix': 'componentWillReceiveProps'
    'body': """
      componentWillReceiveProps(nextProps, nextState) {

      }
    """
'.source.js':
  'statelessComponent':
    'prefix': 'statelessComponent'
    'body': """
      import React from 'react';

      const Component = (/* props */) => (
        <div />
      );

      Component.propTypes = {

      };

      export default Component;
    """
'.source.js':
  'React Component':
    'prefix': 'reactComponent'
    'body': """
      import React from 'react';

      export default class Component extends React.Component {
        static propTypes() {

        }
        constructor(props) {
          super(props);
          this.state = {

          };
        }
        render() {
          return (
            <div />
          );
        }
      }
    """


# React compatible boostrap snippets
'.source.jsx':
  'Button Group':
    'prefix': 'button-group'
    'body': """
      <div className="btn-group" role="group" aria-label="Basic example">
        <button type="button" className="btn btn-secondary">
          Left
        </button>
        <button type="button" className="btn btn-secondary">
          Middle
        </button>
        <button type="button" className="btn btn-secondary">
          Right
        </button>
      </div>
    """

'.source.jsx':
  'Button Group':
    'prefix': 'button-group'
    'body': """
      <div id="carouselExampleControls" class="carousel slide" data-ride="carousel">
        <div class="carousel-inner" role="listbox">
          <div class="carousel-item active">
            <img class="d-block img-fluid" src="..." alt="First slide">
          </div>
          <div class="carousel-item">
            <img class="d-block img-fluid" src="..." alt="Second slide">
          </div>
          <div class="carousel-item">
            <img class="d-block img-fluid" src="..." alt="Third slide">
          </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="sr-only">Next</span>
        </a>
      </div>
    """

'.source.jsx':
  'Bootstrap-React Modal':
    'prefix': 'bootstrapReactModal'
    'body': """
      <div id="myModal" className="modal fade" tabIndex="-1" role="dialog">
        <div className="modal-dialog" role="document">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title">My Modal</h5>
              <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div className="modal-body">
              ...
            </div>
          </div>
          <div className="modal-footer">
            <button type="button" className="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" className="btn btn-success" data-dismiss="modal">Sign Up</button>
          </div>
        </div>
      </div>
    """
